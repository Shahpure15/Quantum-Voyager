<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Black Hole Simulation</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js"></script>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        #container {
            position: absolute;
            width: 100%;
            height: 100%;
        }
        #ui {
            position: absolute;
            bottom: 20px;
            left: 20px;
            color: white;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            max-width: 300px;
            z-index: 100;
            backdrop-filter: blur(5px);
        }
        #loading {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: black;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 24px;
            z-index: 1000;
        }
        .control-group {
            margin-bottom: 10px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }
        input[type="range"] {
            width: 100%;
            accent-color: #6366f1;
        }
        .btn {
            background: #4f46e5;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 5px;
            margin-top: 5px;
            transition: all 0.2s;
        }
        .btn:hover {
            background: #6366f1;
            transform: translateY(-1px);
        }
        .btn:active {
            transform: translateY(0);
        }
        .btn-secondary {
            background: rgba(255, 255, 255, 0.1);
        }
        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.2);
        }
        .value-display {
            font-size: 12px;
            opacity: 0.8;
            text-align: right;
            margin-top: 2px;
        }
        #particle-controls {
            margin-top: 15px;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
            padding-top: 15px;
        }
        @media (max-width: 768px) {
            #ui {
                max-width: 200px;
                font-size: 14px;
                padding: 10px;
            }
            .btn {
                padding: 6px 10px;
                font-size: 12px;
            }
        }
        #info-panel {
            position: absolute;
            top: 20px;
            right: 20px;
            color: white;
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            max-width: 300px;
            z-index: 100;
            backdrop-filter: blur(5px);
            display: none;
        }
        #info-panel h3 {
            margin-top: 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding-bottom: 8px;
        }
        #info-panel p {
            font-size: 14px;
            line-height: 1.5;
        }
        #close-info {
            position: absolute;
            top: 5px;
            right: 5px;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div id="container"></div>
    <div id="ui">
        <h2 class="text-xl font-bold mb-3">Black Hole Controls</h2>
        <div class="control-group">
            <label for="mass">Mass (Solar Masses) <span id="mass-value" class="value-display">10</span></label>
            <input type="range" id="mass" min="1" max="100" step="1" value="10">
        </div>
        <div class="control-group">
            <label for="spin">Spin Rate <span id="spin-value" class="value-display">0.5</span></label>
            <input type="range" id="spin" min="0" max="0.99" step="0.01" value="0.5">
        </div>
        <div class="control-group">
            <label for="diskBrightness">Accretion Disk Brightness <span id="diskBrightness-value" class="value-display">1.0</span></label>
            <input type="range" id="diskBrightness" min="0.1" max="2" step="0.1" value="1">
        </div>
        <div class="control-group">
            <label for="lensing">Gravitational Lensing <span id="lensing-value" class="value-display">1.5</span></label>
            <input type="range" id="lensing" min="0.5" max="3" step="0.1" value="1.5">
        </div>
        
        <div id="particle-controls">
            <div class="control-group">
                <label for="particleCount">Particle Count <span id="particleCount-value" class="value-display">100</span></label>
                <input type="range" id="particleCount" min="10" max="500" step="10" value="100">
            </div>
            <div class="mt-2">
                <button id="emitParticles" class="btn">Emit Particles</button>
                <button id="clearParticles" class="btn btn-secondary">Clear</button>
            </div>
        </div>
        
        <div class="mt-4 flex flex-wrap gap-2">
            <button id="resetView" class="btn">Reset View</button>
            <button id="toggleAutoRotate" class="btn">Auto Rotate</button>
            <button id="showInfo" class="btn btn-secondary">Info</button>
        </div>
        <div class="mt-3 text-sm opacity-80">
            <p>Use mouse to rotate, scroll to zoom</p>
        </div>
    </div>
    
    <div id="info-panel">
        <button id="close-info">Ã—</button>
        <h3>Black Hole Physics</h3>
        <p>This simulation demonstrates key features of black holes:</p>
        <ul class="list-disc pl-5 mt-2 space-y-1">
            <li><strong>Event Horizon:</strong> The point of no return where escape velocity exceeds light speed</li>
            <li><strong>Accretion Disk:</strong> Superheated matter spiraling into the black hole</li>
            <li><strong>Gravitational Lensing:</strong> Light bending around the massive object</li>
            <li><strong>Relativistic Jets:</strong> High-energy particles ejected along the spin axis</li>
        </ul>
        <p class="mt-3">Adjust the controls to see how different parameters affect the black hole's behavior.</p>
    </div>
    
    <div id="loading">
        <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500 mx-auto mb-4"></div>
            <p>Initializing Black Hole Simulation...</p>
            <p class="text-sm opacity-70 mt-2">Loading relativistic physics engine</p>
        </div>
    </div>

    <script>
        // Wait for everything to load
        window.addEventListener('load', init);
        
        // Constants
        const G = 6.67430e-11; // Gravitational constant
        const c = 299792458;   // Speed of light
        const SOLAR_MASS = 1.98847e30; // kg
        
        // Simulation variables
        let scene, camera, renderer, controls;
        let blackHole, accretionDisk, starField, particles = [];
        let autoRotate = false;
        let clock = new THREE.Clock();
        let particleSystem;
        let jet1, jet2;
        let schwarzschildRadius = 0.2;
        let mass = 10; // In solar masses

        function init() {
            // Create scene
            scene = new THREE.Scene();
            
            // Create camera
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);
            camera.position.z = 5;
            
            // Create renderer with better quality settings
            renderer = new THREE.WebGLRenderer({
                antialias: true,
                powerPreference: "high-performance"
            });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.outputEncoding = THREE.sRGBEncoding;
            document.getElementById('container').appendChild(renderer.domElement);
            
            // Add controls
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.minDistance = 3;
            controls.maxDistance = 50;
            
            // Add ambient light
            const ambientLight = new THREE.AmbientLight(0x404040);
            scene.add(ambientLight);
            
            // Add directional light
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
            directionalLight.position.set(1, 1, 1);
            scene.add(directionalLight);
            
            // Create black hole
            createBlackHole();
            
            // Create accretion disk
            createAccretionDisk();
            
            // Create star field
            createStarField();
            
            // Create relativistic jets
            createJets();
            
            // Create particle system
            createParticleSystem();
            
            // Add event listeners
            window.addEventListener('resize', onWindowResize);
            
            // Setup UI controls
            setupControls();
            
            // Info panel controls
            document.getElementById('showInfo').addEventListener('click', () => {
                document.getElementById('info-panel').style.display = 'block';
            });
            document.getElementById('close-info').addEventListener('click', () => {
                document.getElementById('info-panel').style.display = 'none';
            });
            
            // Hide loading screen after a short delay
            setTimeout(() => {
                document.getElementById('loading').style.opacity = '0';
                setTimeout(() => {
                    document.getElementById('loading').style.display = 'none';
                }, 500);
            }, 2000);
            
            // Start animation loop
            animate();
        }
        
        function createBlackHole() {
            // Calculate Schwarzschild radius based on mass
            updateSchwarzschildRadius();
            
            // Create a sphere for the black hole
            const geometry = new THREE.SphereGeometry(schwarzschildRadius, 64, 64);
            
            // Custom shader material for the black hole with improved effects
            const material = new THREE.ShaderMaterial({
                uniforms: {
                    time: { value: 0 },
                    spin: { value: 0.5 },
                    lensing: { value: 1.5 },
                    mass: { value: mass }
                },
                vertexShader: `
                    varying vec2 vUv;
                    varying vec3 vPosition;
                    
                    void main() {
                        vUv = uv;
                        vPosition = position;
                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                    }
                `,
                fragmentShader: `
                    uniform float time;
                    uniform float spin;
                    uniform float lensing;
                    uniform float mass;
                    varying vec2 vUv;
                    varying vec3 vPosition;
                    
                    // Simulate gravitational lensing with improved physics
                    vec3 blackHoleEffect(vec2 uv, float radius, float distortion) {
                        vec2 center = vec2(0.5, 0.5);
                        vec2 pos = uv - center;
                        float dist = length(pos);
                        
                        // Calculate photon sphere (3/2 * Schwarzschild radius)
                        float photonSphere = radius * 1.5;
                        
                        if (dist < radius) {
                            // Inside event horizon - pure black
                            return vec3(0.0);
                        } else if (dist < photonSphere) {
                            // Photon sphere region - light orbits the black hole
                            float orbitFactor = smoothstep(radius, photonSphere, dist);
                            float angle = atan(pos.y, pos.x) + time * 0.5 * spin * (1.0 + orbitFactor * 2.0);
                            vec2 orbitPos = vec2(cos(angle), sin(angle)) * photonSphere;
                            return vec3(orbitPos + center, dist);
                        } else {
                            // Gravitational lensing effect
                            float distortionFactor = distortion * (radius / dist) * (1.0 + spin * 0.5);
                            vec2 distortedPos = pos * (1.0 - distortionFactor);
                            
                            // Add frame-dragging effect from spin
                            float frameDrag = spin * 0.3 * (1.0 - smoothstep(0.0, radius * 4.0, dist));
                            angle = atan(pos.y, pos.x) + frameDrag * time * 0.2;
                            
                            // Add spiral motion based on spin
                            float spiral = sin(angle * 5.0 + time * 2.0) * 0.1 * spin;
                            distortedPos += spiral * normalize(pos);
                            
                            // Return distorted UV coordinates
                            return vec3(distortedPos + center, dist);
                        }
                    }
                    
                    void main() {
                        float radius = ${schwarzschildRadius.toFixed(3)};
                        vec3 effect = blackHoleEffect(vUv, radius, lensing);
                        
                        if (effect.z < radius) {
                            // Event horizon
                            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
                        } else {
                            // Gravitationally lensed area
                            float edge = smoothstep(radius, radius * 1.5, effect.z);
                            vec3 color = mix(vec3(0.2, 0.1, 0.5), vec3(0.0), edge);
                            
                            // Add subtle glow with mass-dependent intensity
                            float glowIntensity = 0.3 * log(mass) / log(10.0);
                            float glow = pow(1.0 - smoothstep(radius * 1.5, radius * 3.0, effect.z), 2.0) * glowIntensity;
                            color += vec3(glow * 0.5, glow * 0.3, glow);
                            
                            gl_FragColor = vec4(color, 1.0);
                        }
                    }
                `
            });
            
            blackHole = new THREE.Mesh(geometry, material);
            scene.add(blackHole);
        }
        
        function updateSchwarzschildRadius() {
            // Schwarzschild radius formula: 2GM/c^2
            schwarzschildRadius = (2 * G * mass * SOLAR_MASS) / (c * c);
            // Scale for visualization (1 solar mass = 0.02 units)
            schwarzschildRadius = mass * 0.02;
        }
        
        function createAccretionDisk() {
            // Create a flat disk geometry with inner radius at photon sphere (1.5 * Schwarzschild radius)
            const innerRadius = schwarzschildRadius * 1.5;
            const outerRadius = innerRadius * 8;
            const geometry = new THREE.RingGeometry(innerRadius, outerRadius, 128);
            
            // Custom shader material for the accretion disk with improved physics
            const material = new THREE.ShaderMaterial({
                uniforms: {
                    time: { value: 0 },
                    spin: { value: 0.5 },
                    brightness: { value: 1.0 },
                    innerRadius: { value: innerRadius },
                    outerRadius: { value: outerRadius }
                },
                vertexShader: `
                    varying vec2 vUv;
                    varying vec3 vPosition;
                    
                    void main() {
                        vUv = uv;
                        vPosition = position;
                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                    }
                `,
                fragmentShader: `
                    uniform float time;
                    uniform float spin;
                    uniform float brightness;
                    uniform float innerRadius;
                    uniform float outerRadius;
                    varying vec2 vUv;
                    varying vec3 vPosition;
                    
                    // Simple noise function for turbulence
                    float noise(vec2 p) {
                        return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
                    }
                    
                    // Generate turbulence for the disk
                    float turbulence(vec2 p) {
                        float w = 100.0;
                        float t = -0.5;
                        for (float f = 1.0; f <= 10.0; f++) {
                            float power = pow(2.0, f);
                            t += abs(noise(vec2(power * p.x, power * p.y)) / power);
                        }
                        return t;
                    }
                    
                    void main() {
                        // Disk coordinates
                        vec2 center = vec2(0.5, 0.5);
                        vec2 pos = vUv - center;
                        float dist = length(pos);
                        
                        // Map to actual radius in the simulation
                        float radius = mix(innerRadius, outerRadius, dist * 2.0);
                        
                        // Calculate orbital velocity (Keplerian, proportional to 1/sqrt(r))
                        float orbitalVelocity = 1.0 / sqrt(radius);
                        
                        // Create spiral arms with velocity-dependent pattern
                        float angle = atan(pos.y, pos.x) + spin * time * 0.5 * orbitalVelocity;
                        float spiral = sin(angle * 8.0 + time * orbitalVelocity * 5.0) * 0.5;
                        
                        // Create turbulent patterns with radius-dependent scale
                        float turbScale = 1.0 + 4.0 * (1.0 - smoothstep(innerRadius, outerRadius, radius));
                        float turb = turbulence(vUv * turbScale + time * 0.05);
                        
                        // Calculate disk visibility based on radius
                        float innerEdge = smoothstep(innerRadius, innerRadius * 1.2, radius);
                        float outerEdge = 1.0 - smoothstep(outerRadius * 0.9, outerRadius, radius);
                        float disk = innerEdge * outerEdge;
                        
                        // Doppler effect (redshift/blueshift) - more pronounced with higher spin
                        vec3 color;
                        if (pos.x > 0.0) {
                            // Blueshift (approaching side)
                            float blueShift = 0.5 + spin * 0.5;
                            color = mix(vec3(0.2, 0.5, 1.0), vec3(0.8, 0.9, 1.0), disk) * blueShift;
                        } else {
                            // Redshift (receding side)
                            float redShift = 0.7 + spin * 0.3;
                            color = mix(vec3(1.0, 0.3, 0.1), vec3(1.0, 0.8, 0.5), disk) * redShift;
                        }
                        
                        // Add spiral patterns with turbulence
                        color = mix(color, vec3(1.0), 
                            smoothstep(0.7, 0.8, turb + spiral) * disk * (0.3 + spin * 0.5));
                        
                        // Temperature gradient (inner parts are hotter)
                        float temperature = 1.0 - smoothstep(innerRadius, outerRadius, radius);
                        color = mix(color, vec3(1.0, 0.9, 0.7), temperature * 0.5);
                        
                        // Apply brightness
                        color *= brightness;
                        
                        // Add glow with radius-dependent intensity
                        float glow = pow(disk, 3.0) * (0.5 + temperature * 0.5);
                        color += vec3(glow * 0.8, glow * 0.5, glow * 0.3);
                        
                        // Alpha based on disk visibility
                        float alpha = disk * (0.8 + turb * 0.2);
                        
                        gl_FragColor = vec4(color, alpha);
                    }
                `,
                transparent: true,
                side: THREE.DoubleSide,
                blending: THREE.AdditiveBlending
            });
            
            accretionDisk = new THREE.Mesh(geometry, material);
            accretionDisk.rotation.x = Math.PI / 2; // Make it horizontal
            scene.add(accretionDisk);
        }
        
        function createStarField() {
            // Create a more realistic star field with varying sizes and colors
            const geometry = new THREE.BufferGeometry();
            const vertices = [];
            const colors = [];
            const sizes = [];
            
            // Generate random stars
            for (let i = 0; i < 10000; i++) {
                // Random position in a sphere
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.acos(2 * Math.random() - 1);
                const r = 500 + Math.random() * 9500; // 500 to 10000 units away
                
                const x = r * Math.sin(phi) * Math.cos(theta);
                const y = r * Math.sin(phi) * Math.sin(theta);
                const z = r * Math.cos(phi);
                
                vertices.push(x, y, z);
                
                // Random color with realistic distribution
                const temp = Math.pow(Math.random(), 2) * 30000 + 3000; // 3000K to 33000K
                let color = new THREE.Color();
                
                if (temp < 3500) {
                    // Red stars
                    color.setRGB(1.0, 0.5 + Math.random() * 0.3, 0.5 + Math.random() * 0.3);
                } else if (temp < 5000) {
                    // Orange stars
                    color.setRGB(1.0, 0.7 + Math.random() * 0.2, 0.5 + Math.random() * 0.2);
                } else if (temp < 6000) {
                    // Yellow stars (like our Sun)
                    color.setRGB(1.0, 0.9 + Math.random() * 0.1, 0.7 + Math.random() * 0.2);
                } else if (temp < 10000) {
                    // White stars
                    color.setRGB(0.8 + Math.random() * 0.2, 0.8 + Math.random() * 0.2, 1.0);
                } else {
                    // Blue stars
                    color.setRGB(0.6 + Math.random() * 0.2, 0.7 + Math.random() * 0.2, 1.0);
                }
                
                // Random brightness variation
                color.multiplyScalar(0.7 + Math.random() * 0.6);
                
                colors.push(color.r, color.g, color.b);
                
                // Random size with some very bright stars
                let size = 0.1 + Math.random() * 0.3;
                if (Math.random() > 0.95) {
                    size *= 3 + Math.random() * 5; // Some larger stars
                }
                sizes.push(size);
            }
            
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
            geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
            geometry.setAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));
            
            const material = new THREE.PointsMaterial({
                size: 0.2,
                vertexColors: true,
                transparent: true,
                opacity: 0.9,
                sizeAttenuation: true
            });
            
            starField = new THREE.Points(geometry, material);
            scene.add(starField);
        }
        
        function createJets() {
            // Create relativistic jets along the spin axis
            const jetGeometry = new THREE.ConeGeometry(0.1, 2, 32);
            
            const jetMaterial = new THREE.MeshBasicMaterial({
                color: 0x4488ff,
                transparent: true,
                opacity: 0.7,
                blending: THREE.AdditiveBlending
            });
            
            jet1 = new THREE.Mesh(jetGeometry, jetMaterial);
            jet1.position.y = 1.5;
            jet1.rotation.x = Math.PI;
            scene.add(jet1);
            
            jet2 = new THREE.Mesh(jetGeometry, jetMaterial);
            jet2.position.y = -1.5;
            scene.add(jet2);
            
            // Add particle systems to jets
            const jetParticles1 = createJetParticles(1);
            const jetParticles2 = createJetParticles(-1);
            scene.add(jetParticles1);
            scene.add(jetParticles2);
        }
        
        function createJetParticles(direction) {
            const particles = 1000;
            const geometry = new THREE.BufferGeometry();
            const positions = new Float32Array(particles * 3);
            const colors = new Float32Array(particles * 3);
            const sizes = new Float32Array(particles);
            
            for (let i = 0; i < particles; i++) {
                // Position along jet axis with some spread
                const i3 = i * 3;
                positions[i3] = (Math.random() - 0.5) * 0.3;
                positions[i3 + 1] = direction * (1 + Math.random() * 3);
                positions[i3 + 2] = (Math.random() - 0.5) * 0.3;
                
                // Blue-white color
                colors[i3] = 0.6 + Math.random() * 0.4;
                colors[i3 + 1] = 0.7 + Math.random() * 0.3;
                colors[i3 + 2] = 1.0;
                
                // Random size
                sizes[i] = 0.05 + Math.random() * 0.1;
            }
            
            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
            geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));
            
            const material = new THREE.PointsMaterial({
                size: 0.1,
                vertexColors: true,
                transparent: true,
                opacity: 0.8,
                blending: THREE.AdditiveBlending,
                sizeAttenuation: true
            });
            
            const particleSystem = new THREE.Points(geometry, material);
            return particleSystem;
        }
        
        function createParticleSystem() {
            // Create a pool of particles we can reuse
            const particleCount = 500;
            const geometry = new THREE.BufferGeometry();
            const positions = new Float32Array(particleCount * 3);
            const colors = new Float32Array(particleCount * 3);
            const sizes = new Float32Array(particleCount);
            const velocities = new Float32Array(particleCount * 3);
            const lifetimes = new Float32Array(particleCount);
            
            // Initialize all particles as inactive
            for (let i = 0; i < particleCount; i++) {
                lifetimes[i] = 0;
            }
            
            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
            geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));
            
            const material = new THREE.PointsMaterial({
                size: 0.1,
                vertexColors: true,
                transparent: true,
                opacity: 0.8,
                blending: THREE.AdditiveBlending,
                sizeAttenuation: true
            });
            
            particleSystem = new THREE.Points(geometry, material);
            particleSystem.userData.velocities = velocities;
            particleSystem.userData.lifetimes = lifetimes;
            particleSystem.userData.activeCount = 0;
            scene.add(particleSystem);
        }
        
        function emitParticles(count) {
            const positions = particleSystem.geometry.attributes.position.array;
            const colors = particleSystem.geometry.attributes.color.array;
            const sizes = particleSystem.geometry.attributes.size.array;
            const velocities = particleSystem.userData.velocities;
            const lifetimes = particleSystem.userData.lifetimes;
            
            let emitted = 0;
            for (let i = 0; i < lifetimes.length && emitted < count; i++) {
                if (lifetimes[i] <= 0) {
                    // Position in a ring around the black hole
                    const angle = Math.random() * Math.PI * 2;
                    const radius = schwarzschildRadius * 3 + Math.random() * schwarzschildRadius * 2;
                    const i3 = i * 3;
                    
                    positions[i3] = Math.cos(angle) * radius;
                    positions[i3 + 1] = (Math.random() - 0.5) * 0.5;
                    positions[i3 + 2] = Math.sin(angle) * radius;
                    
                    // Initial velocity (tangential with some inward component)
                    const speed = 0.02 + Math.random() * 0.03;
                    velocities[i3] = -Math.sin(angle) * speed;
                    velocities[i3 + 1] = (Math.random() - 0.5) * 0.01;
                    velocities[i3 + 2] = Math.cos(angle) * speed;
                    
                    // Color based on temperature (blue = hot)
                    colors[i3] = 0.5 + Math.random() * 0.5;
                    colors[i3 + 1] = 0.3 + Math.random() * 0.5;
                    colors[i3 + 2] = 0.7 + Math.random() * 0.3;
                    
                    // Size
                    sizes[i] = 0.05 + Math.random() * 0.1;
                    
                    // Lifetime in seconds
                    lifetimes[i] = 5 + Math.random() * 10;
                    
                    emitted++;
                    particleSystem.userData.activeCount++;
                }
            }
            
            particleSystem.geometry.attributes.position.needsUpdate = true;
            particleSystem.geometry.attributes.color.needsUpdate = true;
            particleSystem.geometry.attributes.size.needsUpdate = true;
        }
        
        function updateParticles(delta) {
            const positions = particleSystem.geometry.attributes.position.array;
            const velocities = particleSystem.userData.velocities;
            const lifetimes = particleSystem.userData.lifetimes;
            let activeCount = 0;
            
            for (let i = 0; i < lifetimes.length; i++) {
                if (lifetimes[i] > 0) {
                    const i3 = i * 3;
                    
                    // Update lifetime
                    lifetimes[i] -= delta;
                    
                    if (lifetimes[i] > 0) {
                        activeCount++;
                        
                        // Calculate distance to black hole
                        const dx = positions[i3];
                        const dy = positions[i3 + 1];
                        const dz = positions[i3 + 2];
                        const distance = Math.sqrt(dx * dx + dy * dy + dz * dz);
                        
                        // Apply gravity (F = GMm/rÂ²)
                        const gravityFactor = (G * mass * SOLAR_MASS) / (distance * distance * 1e10);
                        
                        // Update velocity (F = ma => a = F/m, assume m=1)
                        velocities[i3] -= (dx / distance) * gravityFactor * delta;
                        velocities[i3 + 1] -= (dy / distance) * gravityFactor * delta;
                        velocities[i3 + 2] -= (dz / distance) * gravityFactor * delta;
                        
                        // Update position
                        positions[i3] += velocities[i3];
                        positions[i3 + 1] += velocities[i3 + 1];
                        positions[i3 + 2] += velocities[i3 + 2];
                        
                        // Check if particle fell into black hole
                        if (distance < schwarzschildRadius * 1.1) {
                            lifetimes[i] = 0;
                            activeCount--;
                        }
                    } else {
                        // Particle died of old age
                        activeCount--;
                    }
                }
            }
            
            particleSystem.userData.activeCount = activeCount;
            particleSystem.geometry.attributes.position.needsUpdate = true;
        }
        
        function clearParticles() {
            const lifetimes = particleSystem.userData.lifetimes;
            for (let i = 0; i < lifetimes.length; i++) {
                lifetimes[i] = 0;
            }
            particleSystem.userData.activeCount = 0;
        }
        
        function setupControls() {
            // Mass control
            const massSlider = document.getElementById('mass');
            const massValue = document.getElementById('mass-value');
            massSlider.addEventListener('input', (e) => {
                mass = parseFloat(e.target.value);
                massValue.textContent = mass;
                
                // Update black hole size
                updateSchwarzschildRadius();
                blackHole.geometry.dispose();
                blackHole.geometry = new THREE.SphereGeometry(schwarzschildRadius, 64, 64);
                blackHole.material.uniforms.mass.value = mass;
                
                // Update accretion disk
                accretionDisk.geometry.dispose();
                const innerRadius = schwarzschildRadius * 1.5;
                const outerRadius = innerRadius * 8;
                accretionDisk.geometry = new THREE.RingGeometry(innerRadius, outerRadius, 128);
                accretionDisk.material.uniforms.innerRadius.value = innerRadius;
                accretionDisk.material.uniforms.outerRadius.value = outerRadius;
            });
            
            // Spin control
            const spinSlider = document.getElementById('spin');
            const spinValue = document.getElementById('spin-value');
            spinSlider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                spinValue.textContent = value.toFixed(2);
                blackHole.material.uniforms.spin.value = value;
                accretionDisk.material.uniforms.spin.value = value;
                
                // Adjust jet length based on spin
                jet1.scale.y = 1 + value * 2;
                jet2.scale.y = 1 + value * 2;
            });
            
            // Disk brightness control
            const brightnessSlider = document.getElementById('diskBrightness');
            const brightnessValue = document.getElementById('diskBrightness-value');
            brightnessSlider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                brightnessValue.textContent = value.toFixed(1);
                accretionDisk.material.uniforms.brightness.value = value;
            });
            
            // Lensing control
            const lensingSlider = document.getElementById('lensing');
            const lensingValue = document.getElementById('lensing-value');
            lensingSlider.addEventListener('input', (e) => {
                const value = parseFloat(e.target.value);
                lensingValue.textContent = value.toFixed(1);
                blackHole.material.uniforms.lensing.value = value;
            });
            
            // Particle count control
            const particleCountSlider = document.getElementById('particleCount');
            const particleCountValue = document.getElementById('particleCount-value');
            particleCountSlider.addEventListener('input', (e) => {
                const value = parseInt(e.target.value);
                particleCountValue.textContent = value;
            });
            
            // Emit particles button
            document.getElementById('emitParticles').addEventListener('click', () => {
                const count = parseInt(document.getElementById('particleCount').value);
                emitParticles(count);
            });
            
            // Clear particles button
            document.getElementById('clearParticles').addEventListener('click', clearParticles);
            
            // Reset view button
            document.getElementById('resetView').addEventListener('click', () => {
                camera.position.set(0, 0, 5);
                controls.reset();
            });
            
            // Auto rotate toggle
            document.getElementById('toggleAutoRotate').addEventListener('click', () => {
                autoRotate = !autoRotate;
                controls.autoRotate = autoRotate;
                controls.autoRotateSpeed = 0.5;
                document.getElementById('toggleAutoRotate').textContent = 
                    autoRotate ? 'Stop Rotation' : 'Auto Rotate';
            });
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            const delta = clock.getDelta();
            const time = clock.getElapsedTime();
            
            // Update shader uniforms
            blackHole.material.uniforms.time.value = time;
            accretionDisk.material.uniforms.time.value = time;
            
            // Rotate the black hole and disk
            blackHole.rotation.y = time * 0.05;
            accretionDisk.rotation.y = -time * 0.1 * blackHole.material.uniforms.spin.value;
            
            // Update particles
            if (particleSystem.userData.activeCount > 0) {
                updateParticles(delta);
            }
            
            // Update controls
            controls.update();
            
            renderer.render(scene, camera);
        }
    </script>
</body>
</html>
